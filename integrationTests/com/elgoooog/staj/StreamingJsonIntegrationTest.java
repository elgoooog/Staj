package com.elgoooog.staj;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import com.elgoooog.staj.StreamingJsonReader.JsonEvent;
import com.elgoooog.staj.StreamingJsonReader.JsonEventType;

public class StreamingJsonIntegrationTest {
	@Test
	public void testIt1() {
		final StreamingJsonReaderFactory factory = new StreamingJsonReaderFactory();
		final StreamingJsonReader reader = factory.createStreamingJsonReader(
				getClass().getResourceAsStream("test1.json"), 1);

		JsonEvent jsonEvent = reader.next();
		assertEquals(JsonEvent.START, jsonEvent);
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("something", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("somethingElse", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("another", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		jsonEvent = reader.next();
		assertEquals("hi", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		assertEquals(JsonEvent.TRUE, reader.next());
		assertEquals(JsonEvent.NULL, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("hi", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("123", jsonEvent.value);
		assertEquals(JsonEventType.NUMBER, jsonEvent.type);
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		jsonEvent = reader.next();
		assertEquals("pint", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.FALSE, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END, reader.next());
	}

	@Test
	public void testIt2() {
		final StreamingJsonReaderFactory factory = new StreamingJsonReaderFactory();
		final StreamingJsonReader reader = factory.createStreamingJsonReader(
				getClass().getResourceAsStream("test2.json"), 5);

		JsonEvent jsonEvent = reader.next();
		assertEquals(JsonEvent.START, jsonEvent);
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("firstName", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("John", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("lastName", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("Smith", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("age", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("25", jsonEvent.value);
		assertEquals(JsonEventType.NUMBER, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("address", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("streetAddress", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("21 2nd Street", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("city", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("New York", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("state", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("NY", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("postalCode", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("10021", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("phoneNumber", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("type", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("home", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("number", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("212 555-1234", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("type", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("fax", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("number", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("646 555-4567", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END, reader.next());
	}

	@Test
	public void testIt3() {
		final StreamingJsonReaderFactory factory = new StreamingJsonReaderFactory();
		final StreamingJsonReader reader = factory.createStreamingJsonReader(
				getClass().getResourceAsStream("test3.json"), 5);

		JsonEvent jsonEvent = reader.next();
		assertEquals(JsonEvent.START, jsonEvent);
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("problems", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("Diabetes", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("medications", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("medicationsClasses", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("className", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("associatedDrug", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("name", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("asprin", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("dose", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("strength", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("500 mg", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		jsonEvent = reader.next();
		assertEquals("associatedDrug#2", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("name", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("somethingElse", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("dose", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("strength", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("500 mg", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		jsonEvent = reader.next();
		assertEquals("className2", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("associatedDrug", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("name", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("asprin", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("dose", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("strength", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("500 mg", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		jsonEvent = reader.next();
		assertEquals("associatedDrug#2", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("name", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("somethingElse", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("dose", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("strength", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		jsonEvent = reader.next();
		assertEquals("500 mg", jsonEvent.value);
		assertEquals(JsonEventType.STRING, jsonEvent.type);
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		jsonEvent = reader.next();
		assertEquals("labs", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		jsonEvent = reader.next();
		assertEquals("a", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.TRUE, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		jsonEvent = reader.next();
		assertEquals("Asthma", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.START_OBJECT, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		jsonEvent = reader.next();
		assertEquals("s", jsonEvent.value);
		assertEquals(JsonEventType.KEY, jsonEvent.type);
		assertEquals(JsonEvent.START_ARRAY, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END_ARRAY, reader.next());
		assertEquals(JsonEvent.END_OBJECT, reader.next());
		assertEquals(JsonEvent.END, reader.next());
	}
}
